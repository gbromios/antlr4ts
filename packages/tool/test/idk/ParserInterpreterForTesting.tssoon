/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:02.1495867-07:00

export class ParserInterpreterForTesting {
	public static class DummyParser extends Parser {
		_atn: ATN; 

		g: Grammar; 
		public DummyParser(Grammar g, ATN atn, TokenStream input) {
			super(input);
			this.g = g;
			this._atn = atn;
		}

		@Override
		get grammarFileName(): string {
			throw new UnsupportedOperationException("not implemented");
		}

		@Override
		get ruleNames(): string[] {
			return g.rules.keySet().toArray(new String[g.rules.size]);
		}

		@Override
		@Deprecated
		getTokenNames(): string[] {
			return g.getTokenNames();
		}

		@Override
		get atn(): ATN {
			return _atn;
		}
	}

	protected g: Grammar; 
	protected atnSimulator: ParserATNSimulator; 
	protected input: TokenStream; 

	 constructor(@NotNull g: Grammar)  {
		this.g = g;
	}

	 constructor1(@NotNull g: Grammar, @NotNull input: TokenStream)  {
		let antlr: Tool =  new Tool();
		antlr.process(g,false);
		atnSimulator = new ParserATNSimulator(new DummyParser(g, g.atn, input), g.atn);
	}

	adaptivePredict(@NotNull input: TokenStream, decision: number, 
							   @Nullable outerContext: ParserRuleContext): number
	{
		return atnSimulator.adaptivePredict(input, decision, outerContext);
	}

	matchATN(@NotNull input: TokenStream, 
						@NotNull startState: ATNState): number
	{
		if (startState.numberOfTransitions == 1) {
			return 1;
		}
		else if (startState instanceof DecisionState) {
			return atnSimulator.adaptivePredict(input, ((DecisionState)startState).decision, null, false);
		}
		else if (startState.numberOfTransitions > 0) {
			return 1;
		}
		else {
			return -1;
		}
	}

	getATNSimulator(): ParserATNSimulator {
		return atnSimulator;
	}

}
